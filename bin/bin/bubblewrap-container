#!/bin/bash

# Usage: $0 <path_to_open_in_emacs_and_mount> [additional_path_to_mount_1 ...]
# All provided paths will be bind-mounted into the container at their original absolute paths.
# Emacs will be started with the first path as its argument.
# All paths must exist.

if [ "$#" -eq 0 ]; then
    echo "Usage: $0 <path_to_open_in_emacs_and_mount> [additional_path_to_mount_1 ...]"
    echo "Example: $0 /path/to/my/projectA /path/to/another/projectB /path/to/a/file.txt"
    echo "Error: At least one path argument is required."
    exit 1
fi

BWRAP_BIND_OPTS=()
EMACS_TARGET_PATH=""
FIRST_PATH_SET=false # To correctly identify the first path for Emacs to open

for path_arg in "$@"; do
    # Validate path exists and get absolute path (resolve symlinks, ., ..)
    # realpath -e exits with error if path doesn't exist or cannot be resolved.
    abs_path=$(realpath -e "$path_arg")
    if [ $? -ne 0 ]; then
        echo "Error: Path '$path_arg' is not valid or does not exist."
        # realpath usually prints its own error, this adds context.
        exit 1
    fi

    BWRAP_BIND_OPTS+=("--bind")
    BWRAP_BIND_OPTS+=("$abs_path")
    BWRAP_BIND_OPTS+=("$abs_path") # Mount source (host) and target (container) are the same absolute path

    if ! $FIRST_PATH_SET; then
        EMACS_TARGET_PATH="$abs_path" # Set the first valid absolute path as Emacs target
        FIRST_PATH_SET=true
    fi
done

# Construct the final emacs command arguments
# EMACS_TARGET_PATH will be set because we checked $# -eq 0 and exited if true,
# and realpath -e would have exited if the first path was invalid.
EMACS_CMD_ARGS=("$EMACS_TARGET_PATH")

exec bwrap \
    --new-session \
    --die-with-parent \
    --unshare-user-try \
    --unshare-pid \
    \
    --proc /proc \
    --dev /dev \
    --tmpfs /tmp \
    --tmpfs /var \
    --tmpfs /run \
    \
    --ro-bind /usr /usr \
    --ro-bind /lib /lib \
    --ro-bind /lib64 /lib64 \
    --ro-bind /bin /bin \
    --ro-bind /sbin /sbin \
    --ro-bind /etc /etc \
    --tmpfs /etc/ssh/ssh_config.d \
    --ro-bind /opt /opt \
    --ro-bind /usr/share /usr/share \
    "${BWRAP_BIND_OPTS[@]}" \
    \
    --ro-bind "/gnu/store" "/gnu/store" \
    --ro-bind "$HOME/.guix-profile" "$HOME/.guix-profile" \
    --ro-bind "$HOME/.profile" "$HOME/.profile" \
    --ro-bind "$HOME/.zshrc" "$HOME/.zshrc" \
    --ro-bind "$HOME/.nvm" "$HOME/.nvm" \
    --bind "$HOME/.m2" "$HOME/.m2" \
    --bind "$HOME/.lein" "$HOME/.lein" \
    --ro-bind "$HOME/.oh-my-zsh" "$HOME/.oh-my-zsh" \
    --ro-bind "$HOME/.zshrc.d" "$HOME/.zshrc.d" \
    --ro-bind "$HOME/.zsh_history" "$HOME/.zsh_history" \
    --ro-bind "$HOME/.bashrc" "$HOME/.bashrc" \
    --ro-bind "$HOME/.bash_history" "$HOME/.bash_history" \
    --ro-bind "$HOME/.bash_profile" "$HOME/.bash_profile" \
    --ro-bind "$HOME/.gitconfig" "$HOME/.gitconfig" \
    --bind "$HOME/.emacs.d" "$HOME/.emacs.d" \
    --bind "$HOME/.local" "$HOME/.local" \
    --bind "$HOME/.ssh" "$HOME/.ssh" \
    --bind "$HOME/dotfiles" "$HOME/dotfiles" \
    --bind "$HOME/dotfiles_private" "$HOME/dotfiles_private" \
    --bind "$HOME/src/gptel-clone" "$HOME/src/gptel-clone" \
    --ro-bind "$HOME/src/200ok/ok-audio-transcription" "$HOME/src/200ok/ok-audio-transcription" \
    --bind "$HOME/.hunspell_personal" "$HOME/.hunspell_personal" \
    --ro-bind "$HOME/src/200ok/admin/src/org-ok-estimations" "$HOME/src/200ok/admin/src/org-ok-estimations" \
    \
    --bind /tmp/.X11-unix /tmp/.X11-unix \
    --bind "/run/user/$(id -u)/pulse" "/run/user/$(id -u)/pulse" \
    --setenv SSH_AUTH_SOCK "$SSH_AUTH_SOCK" \
    \
    --setenv DISPLAY "$DISPLAY" \
    --setenv XAUTHORITY "$XAUTHORITY" \
    --setenv PULSE_RUNTIME_PATH "/run/user/$(id -u)/pulse" \
    --setenv HOME "$HOME" \
    --setenv USER "$USER" \
    --setenv SHELL "$SHELL" \
    --setenv PATH "/usr/local/bin:/usr/bin:/bin" \
    --setenv SSH_AUTH_SOCK "$SSH_AUTH_SOCK" \
    --unsetenv EMACSLOADPATH \
    \
    emacs "${EMACS_CMD_ARGS[@]}"
